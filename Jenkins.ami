pipeline {
    agent any
    stages {
        stage("AWS Demo") {
            steps {
                withCredentials([
                    [
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws_credential',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]
                ]) {
                    sh "aws s3 ls"
                }
            }
        }
        stage("Verify File Path") {
            steps {
                script {
                    // Check if the Ansible playbook file exists
                    sh "ls -la ./spring-petclinic/ansible/"
                }
            }
        }
        stage("Building AMI") {
            steps {
                withCredentials([
                    [
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws_credential',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]
                ]) {
                    script {
                        // Initialize Packer plugins
                        sh "packer init aws-ami-v1.pkr.hcl"

                        // Debug Packer logs and build AMI
                        sh """
                        export PACKER_LOG=1
                        export PACKER_LOG_PATH=packer.log
                        packer build aws-ami-v1.pkr.hcl
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            // Archive Packer log for debugging if needed
            archiveArtifacts artifacts: 'packer.log', allowEmptyArchive: true
        }
        failure {
            echo "Pipeline failed. Check packer.log for details."
        }
    }
}
